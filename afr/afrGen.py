#!/usr/bin/env python

#NBv = (0.00, 0.01, 0.03, 0.05, 0.10, 0.15, 0.20, 0.75, 0.83, 0.88, 0.90, 0.92, 5.01)
#NBa = (28.0, 27.0, 19.0, 17.0, 15.5, 15.0, 14.7, 14.7, 14.2, 12.5, 10.0,  5.0, 0.00)

NB  = False
MS2 = False

aemNonBv = ( 0.00, 0.16, 0.31, 0.47, 0.62, 0.78, 0.94, 1.09, 1.25, 1.40, 1.56,  1.72,  1.87,  2.03,  2.18,  2.34,  2.50,  2.65,  2.81,  2.96,  3.12,  3.27,  3.43,  3.59,  3.74,  3.90,  4.05,  4.21,  4.37,  4.52,  4.68,  4.83,  4.99,  5.01 )
aemNonBa = ( 8.41, 8.52, 8.64, 8.81, 8.98, 9.09, 9.26, 9.44, 9.61, 9.78, 9.95, 10.12, 10.29, 10.47, 10.69, 10.92, 11.15, 11.38, 11.67, 11.95, 12.24, 12.58, 12.92, 13.27, 13.67, 14.13, 14.64, 15.21, 15.84, 16.53, 17.27, 18.19, 19.44, 99.00 )

aemLinBv = ( 0.00,  0.16,  0.31,  0.47,  0.62,  0.78,  0.94,  1.09,  1.25,  1.40,  1.56,  1.72,  1.87,  2.03,  2.18,  2.34,  2.50,  2.65,  2.81,  2.96,  3.12,  3.27,  3.43,  3.59,  3.74,  3.90,  4.05,  4.21,  4.37,  4.52,  4.68,  4.83,  4.99,  5.01 )
aemLinBa = ( 9.72, 10.01, 10.35, 10.64, 10.98, 11.27, 11.55, 11.90, 12.18, 12.47, 12.81, 13.10, 13.44, 13.73, 14.01, 14.35, 14.64, 14.93, 15.27, 15.56, 15.84, 16.18, 16.47, 16.81, 17.10, 17.39, 17.73, 18.01, 18.36, 18.64, 18.93, 19.27, 19.56, 99.00 )

if NB:
   Bv = (0.00, 0.44, 0.45, 0.50, 0.51, 5.00)
   Ba = (17.0, 17.0, 14.8, 14.6, 12.0, 12.0)
else:
   # DIY-WB
   Bv = (0.00, 1.40, 1.45, 1.50, 1.55, 1.60, 1.65, 1.70, 1.75, 1.80, 1.85, 1.90, 1.95, 2.00, 2.05, 2.10, 2.15, 2.20, 2.25, 2.30, 2.35, 2.40, 2.45, 2.50, 2.55, 2.60, 2.65, 2.70, 2.75, 2.80, 2.85, 2.90, 4.00, 5.01)
   Ba = (7.42, 10.08, 10.23, 10.38, 10.53, 10.69, 10.86, 11.03, 11.20, 11.38, 11.57, 11.76, 11.96, 12.17, 12.38, 12.60, 12.83, 13.07, 13.31, 13.57, 13.84, 14.11, 14.40, 14.70, 15.25, 15.84, 16.48, 17.18, 17.93, 18.76, 19.66, 20.66, 40.00, 60.00)
   # TechEdge WBLIN
   # afr = { 9.0 + 0.039216 * egoADC } ; WBLIN, Mot ADC
#  For the Lambdaboy thingy, the three points given
#  (11=2.05, 14.7=4.21, 16=4.98) are damn close to a straight line.
#  afr = { 7.5 + 0.0335875 * egoADC } ; LBoy, MOT ADC

# http://www.plxdevices.com/M-Series_productinfo.htm
# afr = { 10.0 + 0.039216 * egoADC } ; PLX WB, Mot ADC

Bv = aemLinBv
Ba = aemLinBa

if MS2:
   NADC = 1024
else:
   NADC = 256

if MS2:
   print "#pragma ROM_VAR EGO_ROM"
   print "/* ego sensor output in afr x 10 */"
   print "const unsigned char egofactor_table[%d] = {" % NADC

iV = 0
for adc in range(0,NADC):
   voltage = adc / (NADC-1.0) * 5.0
   while voltage > Bv[iV]: iV += 1
   # Now Bv[iV-1] <= voltage <= Bv[iv]
   vPct = 1.0 - (Bv[iV] - voltage) / (Bv[iV] - Bv[iV-1])
   afr  = vPct * (Ba[iV] - Ba[iV-1]) + Ba[iV-1]

   if MS2:
      if adc < NADC-1: print "   %d,   // %4d  %5.3f" % (afr*10, adc, voltage)
      else           : print "   %d};  // %4d  %5.3f" % (afr*10, adc, voltage)
   else:
      print "\tDW\t%.0f\t; %3d %5.2f" % (afr*100, adc, voltage)

"""if MS2:
   print "#pragma ROM_VAR DEFAULT"
AEM
   Voltage AFR
0.00 9.72
0.16 10.01
0.31 10.35
0.47 10.64
0.62 10.98
0.78 11.27
0.94 11.55
1.09 11.90
1.25 12.18
1.40 12.47
1.56 12.81
1.72 13.10
1.87 13.44
2.03 13.73
2.18 14.01
2.34 14.35
2.50 14.64
2.65 14.93
2.81 15.27
2.96 15.56
3.12 15.84
3.27 16.18
3.43 16.47
3.59 16.81
3.74 17.10
3.90 17.39
4.05 17.73
4.21 18.01
4.37 18.36
4.52 18.64
4.68 18.93
4.83 19.27
4.99 19.56

FJO:
Voltage Lambda
0.0     0.0
0.811   0.680
0.816   0.681
1.256   0.756
1.325   0.768
1.408   0.781
1.447   0.787
1.667   0.826
1.784   0.847
1.804   0.851
1.872   0.866
1.984   0.886
2.023   0.894
2.126   0.916
2.209   0.933
2.268   0.945
2.414   0.978
2.454   0.988
2.473   0.993
2.502   1.004
2.522   1.012
2.581   1.039
2.610   1.053
2.717   1.109
2.766   1.137
2.820   1.168
2.908   1.225
2.933   1.241
2.977   1.271
3.021   1.305
3.079   1.347
3.099   1.359
3.104   1.361
5.0     2.0

Zeitronix 
V AFR
0.15 9.7
0.31 9.9
0.46 10.1
0.62 10.3
0.78 10.5
0.93 10.7
1.09 11.0
1.24 11.4
1.40 11.7
1.56 12.1
1.71 12.4
1.87 12.8
2.02 13.2
2.18 13.7
2.34 14.2
2.50 14.7
2.65 15.6
2.80 16.9
2.96 18.5
3.00 18.8
3.12 19.9
3.27 21.2

Daytona Twin Tec  AFR = 10+(2xVout)

"""
